# Python
__pycache__/
*.pyc
*.pyo
*.egg-info/
.Python
build/
dist/
*.egg
.eggs/
env/
.venv/
env3/
*.log


# pip
*.whl
.cache/
.eggs/
.tox/
.pip-build-env-*/
.pip-cache-*/
pip-selfcheck.json

# Jupyter Notebook
.ipynb_checkpoints/


# .env file
.env

# Service Account credentials
service_account.json

# Project specific files
.DS_Store
src/aux.py
src/note.py
logs/
**/python/**
**/psycopg2-binary/**
**/.vscode/**
*.zip
process_dev.py
test.py

# AWS SAM
.aws-sam/
packaged.yaml
cdk.out/

# Test files
.coverage

# Pre-commit cache
.pre-commit/

# Local test files
event*.json

# Makefile temporary files
*.tmp

### Terraform ###
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

**/.DS_Store
.vscode
repo structure.md

# End of https://www.toptal.com/developers/gitignore/api/python,terraform,git
Refresh DataBookmark this article to come back to it laterCollapse Extension
Loading....DS_Store
repo_structure.md
structure.txt
*.zip
create_athena_table.txt
create_external_db.sql
